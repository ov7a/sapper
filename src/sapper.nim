import cart/wasm4
import std/random

type GameState = enum START, IN_PROGRESS, OVER, VICTORY
var gameState: GameState = START
var frameCount: int # for randomization

### Field

type
  CellValue = uint8
  Coord = int # good luck changing this to int8
  Cell = (Coord, Coord)

const 
  WIDTH: Coord = 16
  HEIGHT: Coord = WIDTH
  FIELD_SIZE: int = WIDTH * HEIGHT
  MINES = 40

# for a cell: 
# open: 0-8 - number of surrounding mines
# closed: 10 - empty, 11 - mine
const 
  HIDDEN_MINE = 11
  UNKNOWN = 10

var 
  field: array[WIDTH, array[HEIGHT, CellValue]]
  closedCells = FIELD_SIZE

proc isSolvable: bool =
  static: assert WIDTH*HEIGHT <= 1 shl sizeof(uint8)
  var visited: set[uint8]
  proc pos(p: Cell): uint8 = uint8(p[0] * WIDTH + p[1])

  iterator neighbors(p: Cell): Cell =
    let (x, y) = p
    if (x > 0): yield (x - 1, y)
    if (x < WIDTH - 1): yield (x + 1, y)
    if (y > 0): yield (x, y - 1)
    if (y < HEIGHT - 1): yield (x, y + 1)

  var stack: seq[Cell] = @[(WIDTH div 2, HEIGHT div 2)]

  while stack.len > 0:
    let current = stack.pop()
    visited.incl(current.pos())
    for neighbor in neighbors(current):
      if (not (neighbor.pos() in visited)) and field[neighbor[0]][neighbor[1]] != HIDDEN_MINE:
        stack.add(neighbor)

  visited.len == FIELD_SIZE - MINES     

proc generateField(startX: Coord, startY: Coord) = 
  while true:
    for x in 0..<WIDTH:
      for y in 0..<HEIGHT:
        field[x][y] = UNKNOWN

    var minesLeft = MINES
    while minesLeft > 0:
      let mineX = rand(WIDTH - 1)
      let mineY = rand(HEIGHT - 1)
      if field[mineX][mineY] == UNKNOWN and (mineX != startX or mineY != startY):
        field[mineX][mineY] = HIDDEN_MINE
        minesLeft -= 1     

    if (isSolvable()):
      break

proc surroundingMines(x: Coord, y: Coord): uint8 =
  uint8(x > 0 and y > 0 and field[x-1][y-1] == HIDDEN_MINE) + 
  uint8(x > 0 and field[x-1][y] == HIDDEN_MINE) + 
  uint8(x > 0 and y < HEIGHT - 1 and field[x-1][y+1] == HIDDEN_MINE) + 
  uint8(y > 0 and field[x][y-1] == HIDDEN_MINE) + 
  uint8(y < HEIGHT-1 and field[x][y+1] == HIDDEN_MINE) + 
  uint8(x < WIDTH-1 and y > 0 and field[x+1][y-1] == HIDDEN_MINE) + 
  uint8(x < WIDTH-1 and field[x+1][y] == HIDDEN_MINE) + 
  uint8(x < WIDTH-1 and y < HEIGHT-1 and field[x+1][y+1] == HIDDEN_MINE)

proc maybeOpenCell(x: Coord, y: Coord) =
  case field[x][y]
    of HIDDEN_MINE:
      gameState = OVER
    of UNKNOWN:
      field[x][y] = surroundingMines(x, y)
      closedCells -= 1
      if (closedCells == MINES):
        gameState = VICTORY
    else:
      discard

### Sapper

var 
  sapperX: Coord
  sapperY: Coord

proc moveSapper(x: Coord, y: Coord) =
  sapperX = x
  sapperY = y
  maybeOpenCell(x,y)

### Game state

proc restart =
  closedCells = FIELD_SIZE
  let 
    startX = Coord(rand(WIDTH-1))
    startY = Coord(rand(HEIGHT-1))
  generateField(startX, startY)
  moveSapper(startX, startY)
  gameState = IN_PROGRESS

### Controls

const 
  CELL_WIDTH = SCREEN_SIZE div WIDTH
  CELL_HEIGHT = SCREEN_SIZE div HEIGHT

proc processArrows(keyPressed: uint8) = 
  if bool(keyPressed and BUTTON_LEFT):
    moveSapper(max(0, sapperX - 1), sapperY)
  elif bool(keyPressed and BUTTON_RIGHT):
    moveSapper(min(WIDTH - 1, sapperX + 1), sapperY)
  elif bool(keyPressed and BUTTON_UP):
    moveSapper(sapperX, max(0, sapperY - 1))
  elif bool(keyPressed and BUTTON_DOWN):
    moveSapper(sapperX, min(HEIGHT - 1, sapperY + 1))

proc sign(x: int): int =
  if x >= 0: 1 else: -1

proc processMouse(mousePressed: uint8) = 
  if bool(mousePressed and MOUSE_LEFT):
    let 
      diffX = MOUSE_X[] - (sapperX * CELL_WIDTH + CELL_WIDTH div 2)
      diffY = MOUSE_Y[] - (sapperY * CELL_HEIGHT + CELL_HEIGHT div 2)
    if (abs(diffX) >= abs(diffY)) and (abs(diffX) > CELL_WIDTH div 2):
      moveSapper(min(max(0, sapperX + sign(diffX)), WIDTH - 1), sapperY)
    elif (abs(diffY) > CELL_HEIGHT div 2):
      moveSapper(sapperX, min(max(0, sapperY + sign(diffY)), HEIGHT - 1))

proc processKeys(keyPressed: uint8, mousePressed: uint8) =
  if bool(keyPressed and BUTTON_1) or 
    ((gameState != IN_PROGRESS) and bool(mousePressed and MOUSE_LEFT)):
    randomize(frameCount)
    restart()
  elif gameState == IN_PROGRESS:
    if keyPressed != 0:
      processArrows(keyPressed)
    elif mousePressed != 0:
      processMouse(mousePressed)  

### Drawing

proc drawSapper(x: Coord, y: Coord) = 
  DRAW_COLORS[] = 0x4
  oval(x * CELL_WIDTH + 3, y * CELL_HEIGHT + 3, CELL_WIDTH - 6, CELL_HEIGHT - 6)

proc drawUnknownCell(x: Coord, y: Coord) =
  DRAW_COLORS[] = 0x23
  rect(x * CELL_WIDTH, y * CELL_HEIGHT, CELL_WIDTH, CELL_HEIGHT)

proc drawCell(x: Coord, y: Coord) = 
  case field[x][y]
    of UNKNOWN:
      drawUnknownCell(x, y)
    of HIDDEN_MINE:
      if gameState == OVER:
        DRAW_COLORS[] = 0x23
        oval(x * CELL_WIDTH + 2, y * CELL_HEIGHT + 2, CELL_WIDTH - 4, CELL_HEIGHT - 4)
      else:
        drawUnknownCell(x, y)
    of 1..8:
      DRAW_COLORS[] = if (field[x][y] > 2): 0x4 else: 0x2
      text($field[x][y], x * CELL_WIDTH + 1, y * CELL_HEIGHT + 1)
    else:
      discard  

proc drawField =
  for x in 0..<WIDTH:
    for y in 0..<HEIGHT:
      drawCell(x,y)

proc printCenter(text: string, y: int) =
  text(text, (SCREEN_SIZE - text.len * FONT_SIZE) div 2, y)

const 
  LOGO_WIDTH = 160
  LOGO_HEIGHT = 48

var LOGO: array[1920, uint8] = [0x00'u8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x05,0x6a,0xaa,0xaa,0xaa,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x55,0x55,0x59,0x50,0x00,0x00,0x05,0x65,0x99,0x66,0x59,0x90,0x05,0x99,0x6a,0x65,0x40,0x00,0x00,0x00,0x00,0x5a,0x99,0xa5,0x99,0x56,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x95,0x56,0x59,0x6a,0x40,0x00,0x08,0x55,0x59,0x65,0x65,0xa4,0x1a,0x59,0x55,0x66,0x64,0x00,0x00,0x00,0x01,0xa5,0x55,0x55,0x95,0x9a,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x99,0x55,0x65,0x65,0x68,0x00,0x04,0x42,0x55,0x56,0x99,0x60,0x09,0x65,0x96,0x95,0x5a,0x00,0x00,0x00,0x09,0x59,0x56,0xa6,0x56,0x56,0x00,0x00,0x01,0x55,0x50,0x00,0x00,0x01,0x14,0x11,0x11,0x00,0x00,0x00,0x99,0x65,0x55,0x55,0x6a,0x00,0x04,0x02,0x5a,0x55,0x95,0x60,0x09,0x65,0x99,0x65,0x95,0x90,0x00,0x00,0x29,0x95,0x65,0x55,0x65,0x66,0x00,0x00,0x19,0x56,0x5a,0x40,0x00,0x05,0x96,0xa9,0xa9,0xa5,0x00,0x00,0x95,0x96,0x66,0x66,0x55,0x50,0x04,0x42,0x55,0x69,0x55,0x54,0x19,0x56,0x55,0x59,0x59,0xa0,0x00,0x00,0x65,0x59,0x56,0x66,0x55,0x66,0x00,0x01,0x99,0x95,0x66,0x64,0x00,0x09,0x99,0x59,0x69,0x6a,0x90,0x00,0x96,0x55,0x55,0x55,0x55,0x64,0x08,0x11,0x11,0x55,0x56,0x64,0x09,0x55,0x95,0x55,0x95,0x58,0x00,0x00,0x96,0x95,0x99,0x55,0x99,0x5a,0x00,0x0a,0x65,0x66,0x55,0x59,0x00,0x09,0x56,0x66,0x55,0x55,0x64,0x00,0xa9,0x65,0x95,0x96,0x55,0x58,0x08,0x41,0x11,0x56,0x95,0x60,0x19,0x65,0x65,0x99,0x59,0x9a,0x00,0x01,0x59,0x66,0xa5,0xa9,0xa6,0xa5,0x00,0x25,0x55,0x65,0x96,0x56,0x40,0x09,0x95,0x65,0x69,0x56,0x96,0x00,0xa5,0x55,0x95,0x55,0x55,0x55,0x04,0x11,0x10,0xaa,0xaa,0xa0,0x15,0x96,0x6a,0x99,0x65,0x66,0x00,0x01,0x95,0x56,0x40,0x00,0x00,0x00,0x00,0xa6,0x99,0x59,0x55,0x99,0x50,0x09,0x56,0x55,0x95,0x99,0x56,0x41,0x95,0x66,0x55,0x69,0x54,0x15,0x00,0x00,0x00,0x00,0x00,0x00,0x09,0x55,0x60,0x06,0x59,0x56,0x40,0x02,0x56,0x59,0x00,0x00,0x00,0x00,0x01,0x55,0x95,0x95,0x95,0x56,0x60,0x09,0x65,0x59,0x56,0x55,0x55,0x90,0x95,0x56,0x00,0x06,0x55,0x55,0x40,0x00,0x00,0x00,0x00,0x00,0x19,0x95,0x60,0x00,0x66,0x95,0x80,0x02,0x59,0x98,0x00,0x00,0x00,0x00,0x01,0x14,0x95,0xaa,0xa6,0x95,0x64,0x09,0x99,0x96,0x55,0x66,0x66,0x60,0x99,0x66,0x00,0x00,0x55,0x11,0x80,0x00,0x00,0x00,0x00,0x00,0x0a,0x69,0x60,0x00,0x65,0x59,0x80,0x02,0x55,0x68,0x00,0x00,0x00,0x00,0x01,0x10,0x65,0x00,0x19,0x65,0x58,0x06,0x55,0x65,0x55,0xa5,0x95,0x68,0x99,0x66,0x00,0x00,0x14,0x55,0x50,0x00,0x00,0x00,0x00,0x00,0x09,0x55,0x60,0x00,0x25,0x55,0x80,0x01,0x69,0x59,0x00,0x00,0x00,0x00,0x04,0x11,0x50,0x00,0x05,0x56,0x98,0x09,0x59,0xa0,0x00,0x19,0x59,0x98,0xa5,0x5a,0x00,0x00,0x25,0x44,0x55,0x55,0x50,0x00,0x00,0x00,0x19,0x65,0x50,0x00,0x19,0x99,0x90,0x01,0x55,0x96,0x00,0x00,0x00,0x00,0x04,0x11,0x00,0x00,0x01,0x59,0x58,0x09,0x66,0x60,0x00,0x06,0x59,0x55,0x95,0x56,0x00,0x00,0x15,0x54,0x64,0x00,0x10,0x00,0x00,0x00,0x09,0x55,0x50,0x00,0x25,0x56,0x80,0x01,0x9a,0x66,0x91,0x14,0x00,0x00,0x00,0x00,0x01,0x44,0x15,0xa5,0x69,0x09,0x55,0x60,0x00,0x01,0x65,0x95,0x96,0x96,0x00,0x00,0x04,0x11,0x6a,0x56,0xa0,0x00,0x00,0x00,0x1a,0x66,0x60,0x00,0x29,0x65,0x80,0x00,0x95,0x59,0x6a,0xa6,0xa4,0x00,0x00,0x00,0x6a,0xa6,0xaa,0x55,0x98,0x09,0x66,0x60,0x00,0x01,0x56,0x66,0x95,0x96,0x00,0x00,0x05,0x55,0x24,0x41,0x15,0x55,0x55,0x50,0x15,0x55,0x90,0x00,0x69,0x65,0x80,0x00,0x65,0x55,0x55,0x59,0x5a,0x40,0x00,0x02,0x55,0x65,0x55,0x69,0x58,0x0a,0x55,0x94,0x00,0x01,0x69,0x56,0xa5,0x56,0x00,0x00,0x15,0x41,0x59,0x69,0xa5,0x55,0x65,0xa0,0x05,0x66,0x50,0x01,0x95,0x59,0x40,0x00,0x2a,0x55,0x9a,0x95,0x66,0x60,0x00,0x15,0x95,0x55,0x56,0x65,0x68,0x05,0x65,0x60,0x00,0x01,0x95,0x66,0x95,0x56,0x00,0x00,0x15,0x54,0x55,0x54,0x56,0x55,0x66,0x60,0x09,0x95,0x60,0x06,0x56,0x5a,0x00,0x00,0x09,0x69,0x65,0x99,0x59,0x68,0x00,0x65,0x59,0x59,0xa5,0x55,0x65,0x09,0x66,0x54,0x00,0x01,0x66,0x56,0x95,0x55,0x00,0x00,0x14,0x45,0x59,0x55,0x55,0x66,0x55,0xa0,0x1a,0x59,0x6a,0x69,0x99,0x96,0x00,0x00,0x05,0x55,0x55,0x56,0x55,0x99,0x00,0x95,0x59,0x95,0x55,0x59,0x55,0x09,0x96,0x60,0x00,0x01,0x95,0x59,0x95,0x16,0x00,0x00,0x51,0x54,0x89,0x55,0x55,0x95,0x55,0x60,0x09,0x99,0xa5,0x66,0x56,0x58,0x00,0x00,0x01,0xa6,0x55,0x95,0x69,0x5a,0x02,0x99,0x65,0x69,0x56,0x59,0x58,0x09,0x56,0x60,0x00,0x02,0x59,0x65,0x85,0x56,0x00,0x01,0x55,0x05,0x89,0x55,0x5a,0x66,0x66,0x60,0x1a,0x55,0x55,0x55,0x95,0x64,0x00,0x00,0x00,0x15,0x55,0x65,0x55,0x65,0x42,0x55,0x55,0x65,0xaa,0x99,0x59,0x05,0x55,0xa0,0x00,0x06,0x55,0x59,0x55,0x55,0x11,0x19,0x54,0x15,0x49,0x55,0x65,0x5a,0x56,0x60,0x19,0x55,0x66,0x55,0xa5,0x50,0x00,0x00,0x00,0x01,0x55,0x56,0x55,0x55,0x46,0x55,0x5a,0x45,0x46,0x65,0x58,0x09,0xa6,0x60,0x00,0x09,0x99,0x98,0x54,0x45,0x59,0x51,0x45,0x55,0x09,0x59,0x5a,0xaa,0xaa,0xa0,0x09,0x59,0x55,0x66,0x56,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x65,0x55,0x89,0x55,0x58,0x00,0x01,0x55,0x98,0x09,0x59,0x65,0x41,0x65,0x96,0x64,0x55,0x54,0x44,0x55,0x51,0x48,0x0a,0x96,0x64,0x00,0x40,0x00,0x15,0x66,0x65,0x59,0x59,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x15,0x55,0x55,0x55,0x64,0x00,0x01,0x96,0x55,0x0a,0x55,0x59,0x6a,0x99,0x55,0x60,0x51,0x05,0x51,0x44,0x11,0x54,0x09,0x56,0x60,0x00,0x00,0x00,0x09,0x59,0x55,0x96,0x90,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x15,0x55,0x55,0x55,0x60,0x00,0x02,0x59,0x59,0x05,0x69,0x55,0x65,0x56,0x55,0x91,0x54,0x54,0x51,0x54,0x51,0x50,0x0a,0x59,0x60,0x00,0x00,0x00,0x09,0x55,0x69,0x55,0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x05,0x11,0x55,0x14,0x60,0x00,0x01,0x55,0x64,0x06,0x55,0x99,0x56,0x65,0x59,0x40,0x85,0x44,0x45,0x05,0x15,0x40,0x09,0x99,0x64,0x00,0x00,0x00,0x1a,0x69,0x55,0x51,0x54,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x15,0x54,0x55,0x51,0x50,0x00,0x01,0x55,0x58,0x09,0x66,0x55,0x99,0x55,0x99,0x00,0x90,0x51,0x44,0x51,0x55,0x00,0x09,0x55,0x60,0x00,0x00,0x00,0x05,0x55,0x65,0x14,0x44,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x21,0x15,0x45,0x15,0x50,0x00,0x02,0x55,0x55,0x0a,0x55,0x96,0x55,0x69,0x64,0x00,0x55,0x15,0x15,0x45,0x50,0x00,0x09,0x99,0x54,0x00,0x00,0x00,0x15,0x55,0x54,0x54,0x56,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x51,0x54,0x85,0x05,0x14,0x00,0x01,0x54,0x59,0x05,0x56,0x56,0x55,0x55,0x50,0x01,0x54,0x16,0xa9,0x54,0x00,0x00,0x0a,0x55,0x60,0x00,0x00,0x00,0x05,0x45,0x55,0x45,0x05,0x40,0x00,0x01,0x56,0x55,0x55,0x5a,0x54,0x15,0x45,0x55,0x56,0x40,0x02,0x45,0x58,0x09,0x59,0x65,0x95,0x65,0x00,0x00,0x85,0x52,0x00,0x00,0x00,0x00,0x09,0x69,0x69,0x55,0x55,0x50,0x15,0x55,0x51,0x51,0x51,0x80,0x00,0x01,0x41,0x55,0x15,0x15,0x55,0x41,0x42,0x11,0x15,0x55,0x01,0x54,0x14,0x05,0x55,0x65,0x55,0x40,0x00,0x00,0x51,0x42,0x00,0x00,0x00,0x00,0x09,0x56,0x9a,0x6a,0x95,0x50,0x15,0x11,0x50,0x45,0x54,0x60,0x00,0x02,0x45,0x11,0x51,0x50,0x11,0x56,0x00,0x51,0x51,0x55,0x02,0x45,0x54,0x09,0x55,0x60,0x00,0x00,0x00,0x00,0x55,0x56,0x00,0x00,0x00,0x00,0x09,0x55,0x55,0x95,0x55,0x54,0x05,0x51,0x60,0x54,0x45,0x14,0x00,0x02,0x14,0x45,0x51,0x15,0x15,0x14,0x00,0x54,0x54,0x55,0x01,0x15,0x14,0x09,0x55,0x60,0x00,0x00,0x00,0x00,0x54,0x05,0x00,0x00,0x00,0x00,0x05,0x55,0x55,0x55,0x55,0x50,0x05,0x45,0x10,0x14,0x14,0x54,0x00,0x02,0x41,0x51,0x14,0x51,0x50,0x54,0x00,0x25,0x41,0x05,0x02,0x51,0x59,0x05,0x55,0x50,0x00,0x00,0x00,0x00,0x51,0x56,0x00,0x00,0x00,0x00,0x08,0x45,0x55,0x99,0x55,0x54,0x14,0x51,0x60,0x15,0x41,0x15,0x00,0x02,0x05,0x44,0x45,0x44,0x45,0x40,0x00,0x09,0x45,0x55,0x01,0x45,0x44,0x05,0x55,0x54,0x00,0x00,0x00,0x00,0x51,0x42,0x00,0x00,0x00,0x00,0x09,0x55,0x55,0x56,0x55,0x54,0x05,0x05,0x60,0x05,0x45,0x15,0x40,0x02,0x54,0x54,0x54,0x45,0x55,0x00,0x00,0x01,0x51,0x46,0x01,0x50,0x55,0x05,0x14,0x60,0x00,0x00,0x00,0x01,0x54,0x56,0x00,0x00,0x00,0x00,0x05,0x91,0x55,0x65,0x55,0x50,0x15,0x54,0x20,0x01,0x51,0x51,0x40,0x01,0xa9,0x56,0x6a,0x9a,0x50,0x00,0x00,0x00,0x15,0x55,0x01,0x45,0x48,0x05,0x55,0x50,0x00,0x00,0x00,0x00,0x94,0x56,0x00,0x00,0x00,0x00,0x0a,0xa6,0xaa,0xaa,0xaa,0xa0,0x0a,0xa9,0x50,0x00,0x95,0x69,0x90,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x55,0x00,0x55,0x50,0x05,0x11,0x50,0x00,0x00,0x00,0x00,0x91,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x09,0x54,0x60,0x00,0x00,0x00,0x00,0x85,0x16,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x05,0x14,0x14,0x00,0x00,0x00,0x00,0x95,0x56,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x05,0x15,0x60,0x00,0x00,0x00,0x00,0x11,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x05,0x50,0x60,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x05,0x69,0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00]

const
  FIRST_LINE = (SCREEN_SIZE - FONT_SIZE) div 2
  SECOND_LINE = (SCREEN_SIZE + FONT_SIZE) div 2
  BOTTOM = SCREEN_SIZE - FONT_SIZE - FONT_SIZE div 2
  LOGO_Y = 48
  START_TEXT_Y = LOGO_Y + LOGO_HEIGHT + FONT_SIZE div 2

proc drawStartScreen =
  DRAW_COLORS[] = 0x1320
  blit(addr LOGO[0], 0, LOGO_Y, LOGO_WIDTH, LOGO_HEIGHT, BLIT_2BPP)
  DRAW_COLORS[] = 0x2
  printCenter("Press x to start", START_TEXT_Y)
  printCenter("made by ov7a", BOTTOM)

proc drawGameOver =
  DRAW_COLORS[] = 0x24
  printCenter("Game over", FIRST_LINE)
  printCenter("Press x", SECOND_LINE)

proc drawVictory =
  DRAW_COLORS[] = 0x24
  printCenter("Victory!", FIRST_LINE)
  printCenter("Press x", SECOND_LINE)

### Setup and update

proc setup =
  PALETTE[0] = 0xE0F8CF
  PALETTE[1] = 0x86C06C
  PALETTE[2] = 0x306850
  PALETTE[3] = 0xFF0000

# Call NimMain so that global Nim code in modules will be called, 
# preventing unexpected errors
proc NimMain {.importc.}

proc start {.exportWasm.} = 
  NimMain()
  # https://github.com/aduros/wasm4/issues/734
  #randomize()
  setup()

var 
  previousGamepad: uint8 = 0
  previousMouse: uint8 = 0

proc update {.exportWasm.} =
  frameCount += 1
  let 
    gamepad = GAMEPAD1[]
    keyPressed = gamepad and (gamepad xor previousGamepad)
    mouse = MOUSE_BUTTONS[]
    mousePressed = mouse and (mouse xor previousMouse)

  processKeys(keyPressed, mousePressed)
  
  if gameState != START:
    drawField()
    drawSapper(sapperX, sapperY) 

  case gameState:
    of START:
      drawStartScreen()
    of OVER:
      drawGameOver()
    of VICTORY:
      drawVictory()  
    of IN_PROGRESS:
      discard  
  
  # must be at the end to avoid false updates
  previousGamepad = gamepad
  previousMouse = mouse
